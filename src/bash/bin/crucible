#!/usr/bin/env bash
CRUCIBLE_VERSION=0.2.1
CRUCIBLE_LOCATION=${CRUCIBLE_LOCATION:-develop}

function get_uuid {
	grep 'id' .crucible | cut -d'=' -f 2
}


function generate_uuid {
	local uuid
	uuid="$(head -c 1K </dev/urandom | sha256sum -bz | cut -d' ' -f1 | tr -dc '[:print:]')"
	echo "$uuid"
}

function get_shared_dir {
 if [ -z "$XDG_DATA_HOME" ]
 then
	echo "$HOME/.local/share"
 else
	echo "$XDG_DATA_HOME"
 fi
}

function generate_mould {
	wget -q -O .mould "https://raw.githubusercontent.com/StealthyCoder/crucible/$CRUCIBLE_LOCATION/src/bash/core/mould.sh"
}

function create_local_crucible {
	local shared_dir
	shared_dir="$(get_shared_dir)/crucible/$1"
	{ 	
		echo "id=$1"; 
		echo "working_dir=$(pwd)";
		echo "shared_dir=$shared_dir";
		echo "version=$CRUCIBLE_VERSION";
		echo "location=$CRUCIBLE_LOCATION";
		echo "project_name=$2";
		echo "main_file=$3";
		echo "author=$(whoami)";
		echo "created=$(date +%s)";
	} >> .crucible
	
	{
		echo "#!/usr/bin/env bash";
		echo "";
		echo "source .mould";
	} >> "$3"
	chmod +x "$3"
	generate_mould
}

function create_shared_crucible {
	local shared_dir
	shared_dir="$(get_shared_dir)"
	if [ ! -d "$shared_dir/$1" ]
	then
		mkdir "$shared_dir/crucible/$1" -p
	fi
	cp .crucible "$shared_dir/crucible/$1/.crucible"
}

function ask {
	read -r -p "$1" var
	echo "$var"
}

function ask_project_name {
	ask 'What will be the name given to this project? '
}

function ask_main_file {
	ask 'What will be the name given to the main file? '
}

function init {
	if [ ! -f .crucible ]
	then
		local UUID PROJECT_NAME MAIN_FILE
		UUID="$(generate_uuid)"
		PROJECT_NAME="$(ask_project_name)"
		MAIN_FILE="$(ask_main_file)"
		create_local_crucible "$UUID" "$PROJECT_NAME" "$MAIN_FILE"
		create_shared_crucible "$UUID"
	fi
}

function update {
	local UUID share_dir
	UUID="$(get_uuid)"
	share_dir="$(get_shared_dir)"
	sed -i .crucible -e "s/version=[0-9].[0-9].[0-9]/version=$CRUCIBLE_VERSION/g"
	sed -i .crucible -e "s/^location=.*$/location=${CRUCIBLE_LOCATION//\//\\\/}/g"
	cp .crucible "$share_dir/crucible/$UUID/.crucible"
}

function purge {
	local confirmation UUID share_dir
	confirmation="$(ask 'Are you sure you want to purge this project? y/N ')"
	if [ "$confirmation" == "y" ] || [ "$confirmation" == "Y" ]
	then
		echo "Purging.."
		UUID="$(get_uuid)"
		share_dir="$(get_shared_dir)"
		rm -r ./* .crucible .mould
		rm -r "$share_dir/crucible/$UUID/"
		echo "Purged"
	else
		echo "Nothing will be done."
	fi
}

case $1 in
	init)
		init
		;;
	update)
		update
		;;
	purge)
		purge
		;;
	"" | help)
		echo -e "Possible values are:\\n"
		echo "init - Initialise a directory as a Crucible project"
		echo "update - Update current project with new version"
		echo "purge - Remove all files belonging to this project"
		echo "help - Print this help message"
		;;
	*)
		echo "Unsupported command $1"
		;;
esac
